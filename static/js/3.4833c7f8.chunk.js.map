{"version":3,"sources":["app/components/molecules/ErrorView.tsx","app/components/organisms/RepositoryInput.tsx","app/components/organisms/Navigation.tsx","app/pages/SharedHeader.tsx","app/pages/home/Home.tsx"],"names":["ErrorView","children","Container","data-testid","size","styled","section","RepositoryInput","useRepositoryNameState","repoName","debouncedRepoName","setRepoName","useOwnerNameState","ownerName","debouncedOwnerName","setOwnerName","updatedNameOrOwner","usePrevious","history","useHistory","useEffect","push","SpacedSpan","placeholder","value","onChange","event","target","span","Navigation","basename","pathname","useLocation","NavigationWrapper","StyledLink","to","$active","nav","Link","WithSharedHeader","InnerComponent","useBasePathFromUrl","useRepoAndOwnerUrlSlugs","owner","repo","query","useGetRepositoryQuery","variables","fetchPolicy","baseRepoUrl","loading","data","repository","description","homepageUrl","name","openGraphImageUrl","pullRequests","stargazers","watchers","issues","url","href","isSquare","width","height","src","style","objectFit","title","login","content","gap","justify","hoverable","shadow","type","totalCount","error","message"],"mappings":"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","file":"static/js/3.4833c7f8.chunk.js","sourcesContent":["import { Divider, Page } from '@geist-ui/react'\nimport React from 'react'\nimport Github from '@geist-ui/react-icons/github'\nimport styled from 'styled-components'\n\n\nexport const ErrorView: React.FC = ({ children }) => {\n    return (\n        <Page>\n            <Container data-testid=\"error-message\">\n                <Github size={100} />\n                <Divider />\n                {children}\n            </Container>\n        </Page>\n    )\n}\n\nconst Container = styled.section`\n    box-sizing: border-box;\n    padding: 2rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n","import { Input } from '@geist-ui/react'\nimport { useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport styled from 'styled-components';\nimport { useOwnerNameState, usePrevious, useRepositoryNameState } from '../../hooks';\n\nexport const RepositoryInput = () => {\n    const { repoName, debouncedRepoName, setRepoName } = useRepositoryNameState();\n    const { ownerName, debouncedOwnerName, setOwnerName } = useOwnerNameState();\n    const updatedNameOrOwner = usePrevious({ debouncedRepoName, debouncedOwnerName });\n\n    const history = useHistory();\n    useEffect(() => {\n        if (updatedNameOrOwner &&\n            (updatedNameOrOwner.debouncedOwnerName !== debouncedOwnerName\n                || updatedNameOrOwner.debouncedRepoName !== debouncedRepoName\n            )) {\n            history.push(`/${debouncedOwnerName}/${debouncedRepoName}`);\n        }\n    }, [debouncedOwnerName, debouncedRepoName, history, updatedNameOrOwner]);\n\n    return (\n        <Container>\n            <SpacedSpan>You are viewing repository</SpacedSpan>\n            <Input data-testid=\"repository-input\" size=\"large\" placeholder=\"repository\" value={repoName} onChange={(event) => setRepoName(event.target.value)} />\n\n            <SpacedSpan>by</SpacedSpan>\n            <Input data-testid=\"owner-input\" size=\"large\" placeholder=\"owner\" value={ownerName} onChange={(event) => setOwnerName(event.target.value)} />\n        </Container>\n    )\n}\n\nconst Container = styled.section`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0.5rem;\n    position: sticky;\n    top: 0;\n    background-color: rgb(255 255 255 / 70%);\n    backdrop-filter: blur(5px);\n    z-index: 20;\n    width: 100%;\n`;\n\nconst SpacedSpan = styled.span`\n    margin: 0 1rem;\n`;\n\n","import React from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport styled from 'styled-components';\n\nexport const Navigation: React.FC<{ basename: string }> = ({ basename }) => {\n    const { pathname } = useLocation();\n\n    return (\n        <NavigationWrapper>\n            <StyledLink to={basename} $active={pathname === basename}>\n                Home\n            </StyledLink>\n            <StyledLink to={`${basename}/issues`} $active={pathname === `${basename}/issues`}>\n                Issues\n            </StyledLink>\n        </NavigationWrapper>\n    )\n};\n\n\nconst NavigationWrapper = styled.nav`\n    display: flex;\n    justify-content: center;\n    box-sizing: border-box;\n    padding: 1rem;\n    position: sticky;\n    top: 56px;\n    z-index: 20;\n    margin-bottom: 2rem;\n    width: 100%;\n\n    background-color: rgb(255 255 255 / 70%);\n    backdrop-filter: blur(5px);\n    box-shadow: rgb(130 130 130 / 10%) 0px 8px 7px 0px, rgb(0 0 0 / 9%) 2px 3px 5px 0px;\n`;\n\nconst StyledLink = styled(Link) <{ $active: boolean }>`\n    line-height: 2rem;\n    color: black;\n    margin: 0 0.5rem;\n    box-sizing: border-box;\n    border-bottom: solid 2px;\n    border-color: ${({ $active }) => ($active ? 'black' : 'transparent')};\n\n    &:hover {\n        border-color: black;\n    }\n`;\n\n\n","import React from 'react'\nimport { RepositoryInput } from '../components/organisms/RepositoryInput'\nimport { Navigation } from '../components/organisms/Navigation'\nimport { useBasePathFromUrl } from '../hooks'\n\nexport const WithSharedHeader = (InnerComponent: React.ComponentType) => {\n    const WrappedComponent: React.FC = () => {\n        return (\n            <>\n                <RepositoryInput />\n                <Navigation basename={useBasePathFromUrl()} />\n                <InnerComponent />\n            </>\n        )\n    }\n    return WrappedComponent;\n}\n","import { Avatar, Card, Description, Divider, Grid, Link } from '@geist-ui/react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { LoadingLayout } from '../../components/atoms/LoadingLayout';\nimport { ErrorView } from '../../components/molecules/ErrorView';\nimport { useGetRepositoryQuery } from '../../gql';\nimport { useBasePathFromUrl, useRepoAndOwnerUrlSlugs } from '../../hooks';\nimport { WithSharedHeader } from '../SharedHeader'\n\nconst Home = () => {\n    const { owner, repo } = useRepoAndOwnerUrlSlugs();\n\n    const query = useGetRepositoryQuery({\n        variables: {\n            repo,\n            owner,\n        },\n        fetchPolicy: \"cache-first\"\n    });\n    const baseRepoUrl = useBasePathFromUrl();\n\n    if (query.loading) {\n        return <LoadingLayout />\n    }\n\n    if (query.data) {\n        const { description, homepageUrl, name, openGraphImageUrl, owner, pullRequests, stargazers, watchers, issues, url } = query.data.repository!;\n        return (\n            <Container>\n                <Link href={homepageUrl} target=\"_blank\">\n                    <Avatar isSquare width={435} height={200} size=\"large\" src={openGraphImageUrl} style={{ objectFit: \"cover\" }} />\n                </Link>\n\n                <Divider />\n\n                <Description data-testid=\"repository-description\" title={`${name} by ${owner.login}`} content={<h6>{description}</h6>} />\n\n                <Divider />\n\n                <Grid.Container gap={2} justify=\"space-around\">\n                    <Grid>\n                        <Link href={`${url}/stargazers`} target=\"_blank\">\n                            <Card hoverable shadow type=\"dark\">\n                                <h3>Stars</h3>\n                                <h1>{stargazers.totalCount}</h1>\n                            </Card>\n                        </Link>\n                    </Grid>\n                    <Grid>\n                        <Link href={`${url}/watchers`} target=\"_blank\">\n                            <Card hoverable shadow type=\"dark\">\n                                <h3>Watchers</h3>\n                                <h1>{watchers.totalCount}</h1>\n                            </Card>\n                        </Link>\n                    </Grid>\n                    <Grid>\n                        <Link href={`${url}/pulls`} target=\"_blank\">\n                            <Card hoverable shadow type=\"dark\">\n                                <h3>Pull Requests</h3>\n                                <h1>{pullRequests.totalCount}</h1>\n                            </Card>\n                        </Link>\n                    </Grid>\n                    <Grid>\n                        <RouterLink to={`${baseRepoUrl}/issues`}>\n                            <Card hoverable shadow type=\"error\">\n                                <h3>Issues</h3>\n                                <h1>{issues.totalCount}</h1>\n                            </Card>\n                        </RouterLink>\n                    </Grid>\n                </Grid.Container>\n            </Container>\n        )\n    }\n\n    if (query.error) {\n        return <ErrorView>{query.error?.message}</ErrorView>\n    }\n\n    return null;\n}\nexport default WithSharedHeader(Home);\n\nconst Container = styled.section`\n    box-sizing: border-box;\n    padding: 2rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 80%;\n    margin: auto;\n    min-height: 80vh;\n`\n"],"sourceRoot":""}